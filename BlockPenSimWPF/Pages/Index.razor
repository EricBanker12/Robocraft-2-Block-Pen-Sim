@using BlockPenSimWPF.Data;
@using BlockPenSimWPF.Shared.Models;
@using BlockPenSimWPF.Shared.Components;
@using BlockPenSimWPF.Shared.State;
@using System.Data;
@page "/"

@if (!initialized)
{
    <LoadingModal State="State" />
}
else
{
    <div class="d-flex vh-100 vw-100">
        <SettingsModal State="State" />
        <LoadingModal State="State" />
        <SimFormSidebar State="State" />
        <main class="flex-grow-1" style="width: 1px;">
            <ResultsTableSection State="State" />
        </main>
    </div>
}

@code {
    private IndexStore State = new();

    private bool initialized = false;

    /// <summary>
    /// Load user settings and first run simulation
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Create State Store
        State = new IndexStore(StateHasChanged);

        // Load local app settings and custom block data
        State.LoadPreferences();

        // Look for block data updates from internet
        if (State.updateDefaultBlockdataOverInternet)
        {
            var blockData = await BlockData.GetData();
            foreach (var weapon in blockData.Weapons)
            {
                State.Weapons[weapon.Key] = weapon.Value;
                if (!State.WeaponSettings.ContainsKey(weapon.Key))
                    State.WeaponSettings.Add(weapon.Key, new WeaponSettings()
                    {
                        WeaponCount = 120.0 / weapon.Value.cpu,
                        WeaponRatio = 1.0,
                        WeaponFrontRatio = 1.0,
                        WeaponSideRatio = 1.0,
                        WeaponTopRatio = 1.0,

                    });
            }
            foreach (var material in blockData.Materials)
            {
                State.Materials[material.Key] = material.Value;
            }
        }

        State.SavePreferences();

        State.SimData = await BlockPenSimulator.RunAsync(State);

        State.ShowLoading = false;

        initialized = true;

        await base.OnInitializedAsync();
    }
}