@using BlockPenSimWPF.Data;
@using BlockPenSimWPF.Shared.Models;
@using BlockPenSimWPF.Shared.State;
@using System.Data;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.IO;
@using System.Threading;
@using System.Windows;
@using System.Collections.Specialized;


<section id="ResultsSection" class="w-100 h-100 overflow-auto">
    @*Floating buttons to show settings modal or save csv dialogue*@
    <div id="divTableButtons" class="position-sticky" style="z-index: 1045; top: 0; left: 0;">
        <div class="position-relative">
            <div class="position-absolute" style="top: 5px; right: 5px;">
                @*Clear all sorting*@
                @*Clear all filters*@
                @*Toggle column filter joining AND vs OR*@
                @*Show Settings modal dialog*@
                <button @onclick="ShowSettings" aria-label="Settings" title="Show extra settings." class="btn btn-primary btn-sm p-0" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
                    <div class="d-flex justify-content-center align-items-start">
                        <span class="oi oi-cog" aria-hidden="true" style="font-size: 1.2em;"></span>
                    </div>
                </button>
                @*Show save as .csv dialog*@
                <button @onclick="SaveFile" aria-label="Save" title="Save simulation results to a .csv file." class="btn btn-primary btn-sm p-0" style="width: 30px; height: 30px; border-radius: 50%;">
                    <div class="d-flex justify-content-center align-items-start">
                        <span class="oi oi-data-transfer-download" aria-hidden="true" style="font-size: 1.0em;"></span>
                    </div>
                </button>
            </div>
        </div>
    </div>
    @*Table showing the simulation results*@
    <table class="table table-striped table-hover table-sm @(ThemeData.GetCurrentTheme() == Theme.Dark ? "table-dark" : "")">
        <thead class="position-sticky sticky-top" style="box-shadow: 0 1px 0 @(ThemeData.GetCurrentTheme() == Theme.Dark ? "rgba(222, 226, 230, 0.5)" : "black");">
            <tr>
                @foreach (DataColumn column in State.SimData.Columns)
                {
                    if (State.hideZeroRatioWeaponColumns && ColumnsZeroRatioWeapon.Contains(column.ColumnName))
                        continue;
                    if (State.hideZeroRatioDirectionColumns && ColumnsZeroRatioDirection.Contains(column.ColumnName))
                        continue;

                    string name = column.ColumnName;
                    double columnWidth = column.DataType == typeof(string) ? ColumnsMaxValue[name] : Math.Max(1, Math.Floor(Math.Log10(ColumnsMaxValue[name]))) + 2.5;
                    bool isLastColumn = column == State.SimData.Columns[State.SimData.Columns.Count - 1];
                    string columnNws = name.Replace(" ", "");
                    string idSortSelector = $"{columnNws}SortSelector";
                    string idFilterInput = $"{columnNws}FilterInput";

                    <th @key=column class="border-0 text-nowrap" style="height: @($"{(name.Length + 4) * 0.7071}ch;")" scope="col">
                        <div class="position-relative">
                            <div style="transform-origin: center left; transform: translate(0.3536ch, 0.7071em) rotate(-45deg); width: @(isLastColumn ? "12ch" : $"{columnWidth/0.7071}ch;")">
                                <button title="Click to sort or filter by this column." class="btn px-1">
                                    <span>@name</span>
                                    <span class="oi oi-caret-bottom" aria-hidden="true" title="Filtered" hidden=""></span>
                                </button>
                            </div>
                            <div class="position-absolute" style="left: -5px; bottom: -1px;">
                                <div class="dropdown">
                                    <div class="dropdown-menu @(name == "Material" ? "show" : string.Empty)" style="width: 40ch;">
                                        <form>
                                            <div class="input-group px-3 my-3">
                                                <label for="@idSortSelector" class="input-group-text">Sort</label>
                                                <select id="@idSortSelector" class="form-select" @bind=ColumnsSort[name]>
                                                    <option value="" selected>None</option>
                                                    <option value="ASC">Ascending (A &#X2B62; Z)</option>
                                                    <option value="DESC">Descending (Z &#X2B62; A)</option>
                                                </select>
                                            </div>
                                            <div class="input-group px-3 my-3">
                                                <label for="@idFilterInput" class="input-group-text">Filter</label>
                                                <input id="@idFilterInput" type="text" class="form-control" placeholder="@name" @bind-value=ColumnsFilter[name] />
                                            </div>
                                            <div class="d-flex justify-content-end px-2 my-2">
                                                <button type="button" class="btn btn-secondary mx-2">Cancel</button>
                                                <button type="button" class="btn btn-primary mx-2">Apply</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody @key=SimDataView>
            @*Row data only rendering what is visible on the screen*@
            <Virtualize ItemsProvider="DataRowProvider" Context="Row" >
                <tr @key=Row>
                    @foreach (DataColumn Column in State.SimData.Columns)
                    {
                        if (State.hideZeroRatioWeaponColumns && ColumnsZeroRatioWeapon.Contains(Column.ColumnName))
                            continue;
                        if (State.hideZeroRatioDirectionColumns && ColumnsZeroRatioDirection.Contains(Column.ColumnName))
                            continue;

                        string valueString = GetValueString(Row, Column);
                        if (State.ColumnsHighlightMaxValue.ContainsKey(Column.ColumnName) && State.ColumnsHighlightMaxValue[Column.ColumnName])
                        {
                            double value = (double)Row[Column.ColumnName];
                            double percentMax = value / ColumnsMaxValue[Column.ColumnName];

                            <td @key=@($"{Column.ColumnName} {Row.GetHashCode()}") class="position-relative">
                                <div class="position-absolute top-0 start-0 end-0 pe-none" style="bottom: -1px; background-color: rgb(0,255,0); opacity: @(Lerp(0.0, 0.25, percentMax).ToString());"></div>
                                <div class="position-relative">
                                    <span>@valueString</span>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td @key=@($"{Column.ColumnName} {Row.GetHashCode()}")>@valueString</td>
                        }
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>
</section>

@code {
    [Parameter]
    public IndexStore State { get; set; } = new();

    private DataView SimDataView = new();
    private List<string> ColumnsZeroRatioWeapon = new();
    private List<string> ColumnsZeroRatioDirection = new();
    private Dictionary<string, double> ColumnsMaxValue = new();
    private OrderedDictionary ColumnsSort = new();
    private Dictionary<string, string> ColumnsFilter = new();

    private string ColumnNameShowFilter = string.Empty;

    // lifecycle events

    protected override async Task OnParametersSetAsync()
    {
        if (State.SimData.DefaultView != SimDataView)
        {
            SimDataView = State.SimData.DefaultView;
            SetColumnsWithZeroRatio();
            SetColumnsMaxValue();
            SetColumnsSortAndFilter();
            State.HasChanged();
        }

        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Setup filter variables for binding
    /// </summary>
    private void SetColumnsSortAndFilter()
    {
        foreach (DataColumn column in State.SimData.Columns)
        {
            if (!ColumnsSort.Contains(column.ColumnName))
                ColumnsSort.Add(column.ColumnName, "None");

            if (!ColumnsFilter.ContainsKey(column.ColumnName))
                ColumnsFilter.Add(column.ColumnName, column.ColumnName);
        }
    }

    /// <summary>
    /// Updates ColumnsMaxValue and State.ColumnsHighlightMaxValue
    /// </summary>
    private void SetColumnsMaxValue()
    {
        var ColumnsHighlightMaxValue = new Dictionary<string, bool>();
        ColumnsMaxValue.Clear();

        foreach (DataColumn column in State.SimData.Columns)
        {
            if (column.DataType == typeof(double) || column.DataType == typeof(int))
            {
                if (State.ColumnsHighlightMaxValue.ContainsKey(column.ColumnName))
                    ColumnsHighlightMaxValue.Add(column.ColumnName, State.ColumnsHighlightMaxValue[column.ColumnName]);
                else
                    ColumnsHighlightMaxValue.Add(column.ColumnName, false);

                // this can be split to use multithreading, but not worth it for relatively small table size
                ColumnsMaxValue[column.ColumnName] = 0;
                foreach (DataRow dataRow in State.SimData.Rows)
                {
                    object obj = dataRow[column.ColumnName];
                    double value = obj is double ? (double)obj : (int)obj;
                    if (value > ColumnsMaxValue[column.ColumnName])
                        ColumnsMaxValue[column.ColumnName] = value;
                }
            }
            else
            {
                ColumnsMaxValue[column.ColumnName] = 0;
                foreach (DataRow dataRow in State.SimData.Rows)
                {
                    object obj = dataRow[column.ColumnName];
                    double value = obj.ToString()?.Length ?? 0;
                    if (value > ColumnsMaxValue[column.ColumnName])
                        ColumnsMaxValue[column.ColumnName] = value;
                }
            }
        }
        State.ColumnsHighlightMaxValue = ColumnsHighlightMaxValue;
    }

    /// <summary>
    /// Updates ColumnsZeroRatioWeapon and ColumnsZeroRatioDirection
    /// </summary>
    private void SetColumnsWithZeroRatio()
    {
        ColumnsZeroRatioWeapon.Clear();
        foreach (var weapon in State.Weapons)
        {
            if (State.WeaponRatio[weapon.Key] == 0.0)
            {
                ColumnsZeroRatioWeapon.AddRange(BlockPenSimulator.GetWeaponColumNames(State, weapon.Value.name));
            }
        }

        ColumnsZeroRatioDirection.Clear();
        foreach (int direction in Enum.GetValues<Direction>())
        {
            if (State.DirectionRatio[direction] == 0.0)
            {
                ColumnsZeroRatioDirection.AddRange(BlockPenSimulator.GetDirectionColumNames(State, (Direction)direction));
            }
        }
    }

    /// <summary>
    /// Show Settings modal
    /// </summary>
    private void ShowSettings()
    {
        State.ShowSettings = true;
        State.HasChanged();
    }

    /// <summary>
    /// Factory creates an action that sets the ColumnNameShowFilter variable
    /// </summary>
    /// <param name="columnName"></param>
    private Action ToggleShowFilterFactory(string columnName)
    {
        return () => { ColumnNameShowFilter = ColumnNameShowFilter == columnName ? string.Empty : columnName; };
    }

    private void CloseShowFilter()
    {
        ColumnNameShowFilter = string.Empty;
    }

    /// <summary>
    /// Factory creates an action to sort datatable by a specific column name
    /// </summary>
    /// <param name="columnName"></param>
    /// <returns></returns>
    private Action SortDataFactory(string columnName)
    {
        return () => { SortData(columnName); };
    }

    /// <summary>
    /// Upadates dataview sort value
    /// </summary>
    /// <param name="columnName"></param>
    private void SortData(string columnName)
    {
        var oldSort = SimDataView.Sort;
        var newSort = $"{columnName} {SortDirection.DESC}";

        if (newSort.Equals(oldSort))
            newSort = $"{columnName} {SortDirection.ASC}";

        SimDataView.Sort = newSort;
    }

    /// <summary>
    /// Linearly interpolates between 2 numbers, using a 3rd number between 0 and 1. Equivelant to: y*(1-s)+x*s
    /// </summary>
    /// <param name="y"></param>
    /// <param name="x"></param>
    /// <param name="s"></param>
    /// <returns></returns>
    private double Lerp(double y, double x, double s) => x * s + y * (1 - s);

    /// <summary>
    /// Saves datatable csv to file location of user's choice.
    /// </summary>
    private async void SaveFile()
    {
        var fileName = "BlockPenSim.csv";
        var fileFilter = "CSV files|*.csv|All files|*.*";
        var fileData = GetCsvString(State.SimData);
        await Task.Run(() =>
        {
            Microsoft.Win32.SaveFileDialog saveFileDialog = new();
            saveFileDialog.FileName = fileName;
            saveFileDialog.Filter = fileFilter;
            if (saveFileDialog.ShowDialog() == true)
            {
                File.WriteAllText(saveFileDialog.FileName, fileData);
            }
        });
    }

    /// <summary>
    /// Converts datatable to csv, strictly following RFC 4180 definition. https://datatracker.ietf.org/doc/html/rfc4180
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private string GetCsvString(DataTable data)
    {
        var sb = new StringBuilder();
        var regex = new Regex(@"""|,|\r\n");

        var columnNames = new string[data.Columns.Count];
        for (int i = 0; i < columnNames.Length; i++)
        {
            columnNames[i] = data.Columns[i].ColumnName;
            if (regex.IsMatch(columnNames[i]))
            {
                columnNames[i] = $"\"{columnNames[i].Replace(@"""", @"""""")}\"";
            };
        }
        sb.AppendJoin(',', columnNames);

        for (int r = 0; r < data.Rows.Count; r++)
        {
            sb.Append("\r\n");
            var rowStrings = new string[data.Rows[r].ItemArray.Length];
            for (int i = 0; i < rowStrings.Length; i++)
            {
                rowStrings[i] = data.Rows[r].ItemArray[i]?.ToString() ?? string.Empty;
                if (regex.IsMatch(rowStrings[i]))
                {
                    rowStrings[i] = $"\"{rowStrings[i].Replace(@"""", @"""""")}\"";
                }
            }
            sb.AppendJoin(',', rowStrings);
        }

        return sb.ToString();
    }

    /// <summary>
    /// Converts data row value to string. Truncates doubles to readable lengths.
    /// </summary>
    /// <param name="idx"></param>
    /// <param name="Row"></param>
    /// <returns></returns>
    private string GetValueString(DataRow Row, DataColumn Col)
    {
        string value;
        object obj = Row[Col.ColumnName];
        if (obj is double)
        {
            if (Col == State.SimData.Columns[State.SimData.Columns.Count - 1])
                value = ((double)obj).ToString("0.00000");
            else
                value = ((double)obj).ToString("0.00");
        }
        else
        {
            value = obj?.ToString() ?? string.Empty;
        }
        return value;
    }

    /// <summary>
    /// Data provider for datatable compatability with Blazor Virtualization
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<DataRow>> DataRowProvider(ItemsProviderRequest request)
    {
        try
        {
            var stopIndex = Math.Min(request.StartIndex + request.Count, SimDataView.Count);
            var retval = new DataRow[stopIndex - request.StartIndex];
            for (int i = request.StartIndex; i < stopIndex; i++)
            {
                retval[i - request.StartIndex] = SimDataView[i].Row;
            }
            return new ValueTask<ItemsProviderResult<DataRow>>(new ItemsProviderResult<DataRow>(retval, SimDataView.Count));
        }
        catch (Exception)
        {
            return new ValueTask<ItemsProviderResult< DataRow >> (new ItemsProviderResult<DataRow>(new DataRow[0], 0));
        }
    }
}
