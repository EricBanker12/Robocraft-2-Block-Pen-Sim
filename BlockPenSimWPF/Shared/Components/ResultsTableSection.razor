@using BlockPenSimWPF.Data;
@using BlockPenSimWPF.Shared.Models;
@using BlockPenSimWPF.Shared.State;
@using System.Data;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.IO;
@using System.Threading;
@using System.Windows;
@using System.Collections.Specialized;
@using System.Collections;


<section id="ResultsSection" class="w-100 h-100 overflow-auto">
    
    @*Floating buttons to show settings modal or save csv dialogue*@
    <div id="divTableButtons" class="position-sticky" style="z-index: 1045; top: 0; left: 0;">
        <div class="position-relative">
            <div class="position-absolute" style="top: 5px; right: 5px;">
                @*Clear all sorting and filters*@
                <button @onclick="OnClick_RemoveAllSort" aria-label="Clear All Sorting and Filters." title="Clear All Sorting and Filters." class="btn btn-primary btn-sm p-0" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
                    <div class="d-flex justify-content-center align-items-start position-relative">
                        <span class="oi oi-loop-circular" aria-hidden="true" style="font-size: 1.4em;"></span>
                    </div>
                </button>
                @*Show Settings modal dialog*@
                <button @onclick="OnClick_Settings" aria-label="Settings" title="Show extra settings." class="btn btn-primary btn-sm p-0" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
                    <div class="d-flex justify-content-center align-items-start">
                        <span class="oi oi-cog" aria-hidden="true" style="font-size: 1.2em;"></span>
                    </div>
                </button>
                @*Show save as .csv dialog*@
                <button @onclick="OnClick_Download" aria-label="Save" title="Save simulation results to a .csv file." class="btn btn-primary btn-sm p-0" style="width: 30px; height: 30px; border-radius: 50%;">
                    <div class="d-flex justify-content-center align-items-start">
                        <span class="oi oi-data-transfer-download" aria-hidden="true" style="font-size: 1.0em;"></span>
                    </div>
                </button>
            </div>
        </div>
    </div>

    @*Table showing the simulation results*@
    <table class="table table-striped table-hover table-sm @(State.IsDarkMode ? "table-dark" : "")">
        
        @*Rotate Column Headers by 45 degrees for more compact spacing*@
        <thead class="position-sticky sticky-top" style="box-shadow: 0 1px 0 @(State.IsDarkMode ? "rgba(222, 226, 230, 0.5)" : "black");">
            <tr>
                @foreach (DataColumn column in State.SimData.Columns)
                {
                    if (State.hideZeroRatioWeaponColumns && ColumnsZeroRatioWeapon.Contains(column.ColumnName))
                        continue;
                    if (State.hideZeroRatioDirectionColumns && ColumnsZeroRatioDirection.Contains(column.ColumnName))
                        continue;

                    string name = column.ColumnName;
                    double columnWidth = column.DataType == typeof(string) ? ColumnsMaxValue[name] : Math.Max(1, Math.Floor(Math.Log10(ColumnsMaxValue[name]))) + 2.5;
                    bool isLastColumn = column == State.SimData.Columns[State.SimData.Columns.Count - 1];

                    <th @key=column class="border-0 text-nowrap" style="height: @($"{(name.Length + 4) * 0.7071}ch;")" scope="col">
                        <div style="transform-origin: center left; transform: translate(0.3536ch, 0.7071em) rotate(-45deg); width: @(isLastColumn ? "12ch" : $"{columnWidth/0.7071}ch;")">
                            <button title="Click to sort or filter by this column." class="btn px-1" @onclick="OnClick_ColumnName_Factory(name)">
                                <span>@name</span>
                                <span class="oi oi-caret-bottom" aria-hidden="true" title="Filtered" hidden="@(!State.ColumnsSort.Contains(name) && !State.RowFilters.ContainsKey(name))"></span>
                            </button>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        
        @*Show Row data only rendering what is visible on the screen*@
        <tbody @key=SimDataView>
            <Virtualize ItemsProvider="DataRowProvider" Context="Row" >
                <tr @key=Row>
                    @foreach (DataColumn Column in State.SimData.Columns)
                    {
                        if (State.hideZeroRatioWeaponColumns && ColumnsZeroRatioWeapon.Contains(Column.ColumnName))
                            continue;
                        if (State.hideZeroRatioDirectionColumns && ColumnsZeroRatioDirection.Contains(Column.ColumnName))
                            continue;

                        string valueString = GetValueString(Row, Column);
                        if (State.HighlightValues.ContainsKey(Column.ColumnName) && State.HighlightValues[Column.ColumnName])
                        {
                            double value = (double)Row[Column.ColumnName];
                            double percentMax = value / ColumnsMaxValue[Column.ColumnName];
                            if (Double.IsNaN(percentMax)) percentMax = 0;

                            <td @key=@($"{Column.ColumnName} {Row.GetHashCode()}") class="position-relative">
                                <div class="position-absolute top-0 start-0 end-0 pe-none" style="bottom: -1px; background-color: rgb(0,255,0); opacity: @(Lerp(0.0, 0.25, percentMax).ToString());"></div>
                                <div class="position-relative">
                                    <span>@valueString</span>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td @key=@($"{Column.ColumnName} {Row.GetHashCode()}")>@valueString</td>
                        }
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>

    @*Popup modal for sorting and filtering a columm*@
    <div class="modal-backdrop fade @(ShowSortFilterForm ? "show" : "")" @onclick=OnClick_SortFilterCancel />
    <dialog id="SortFilterDialog" class="modal fade @(ShowSortFilterForm ? "show" : "")" open="@ShowSortFilterForm">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title h5">@SortFilterForm.ColumnName</h1>
                    <button type="button" @onclick="OnClick_SortFilterCancel" class="btn-close" aria-label="Close"></button>
                </div>
                <EditForm Model="@SortFilterForm" OnSubmit=OnSubmit_SortFilterForm>
                    <div class="modal-body">
                        <div class="input-group mb-3">
                            <label for="SortSelector" class="input-group-text" title="Sort rows by the ascending or descending values in this column. Multiple column sorts are prioritized by recency.">
                                <span class="px-1">Sort</span>
                            </label>
                            <InputSelect id="SortSelector" class="form-select" @bind-Value="SortFilterForm.ColumnSort" title="Sort rows by the ascending or descending values in this column. Multiple column sorts are prioritized by recency.">
                                <option value="" selected>None</option>
                                <option value="@SortDirection.ASC">Ascending (A &#X2B62; Z)</option>
                                <option value="@SortDirection.DESC">Descending (Z &#X2B62; A)</option>
                            </InputSelect>
                        </div>
                        <div class="input-group">
                            <label for="FilterInput" class="input-group-text" title="Filter rows by custom SQL where clause. Multiple column filters are joined by an AND separator.">
                                <span>Filter</span>
                            </label>
                            <InputText id="FilterInput" class="form-control" @bind-Value=SortFilterForm.RowFilter title="Filter rows by custom SQL where clause. Multiple column filters are joined by an AND separator." />
                        </div>
                        <div class="form-text mb-3">
                            <span>Example: [Material] = 'Airium'</span>
                        </div>
                        @if (ShowHighlightCheckbox)
                        {
                            <div class="mt-3">
                                <div class="form-check">
                                    <InputCheckbox id="HighlightCheckbox" class="form-check-input" @bind-Value="SortFilterForm.HighlightValues" />
                                    <label for="HighlightCheckbox" class="form-check-label">Highlight largest values</label>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" @onclick=OnClick_SortFilterReset class="btn btn-danger me-auto">Reset</button>
                        <button type="button" @onclick=OnClick_SortFilterCancel class="btn btn-secondary mx-2">Cancel</button>
                        <button type="submit" class="btn btn-primary">Apply</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </dialog>
</section>

@code {
    [Parameter]
    public IndexStore State { get; set; } = new();

    private DataView SimDataView = new();
    private List<string> ColumnsZeroRatioWeapon = new();
    private List<string> ColumnsZeroRatioDirection = new();
    private Dictionary<string, double> ColumnsMaxValue = new();

    private SortFilterForm SortFilterForm = new();

    private bool ShowSortFilterForm => !string.IsNullOrEmpty(SortFilterForm.ColumnName);
    private bool ShowHighlightCheckbox => State.HighlightValues.ContainsKey(SortFilterForm.ColumnName ?? string.Empty);

    // ------------------------------------------------------------------------------------------------------------------------
    // lifecycle events
    // ------------------------------------------------------------------------------------------------------------------------
    protected override async Task OnParametersSetAsync()
    {
        if (State.SimData != SimDataView.Table)
        {
            SimDataView =  new DataView(State.SimData);
            SetColumnsWithZeroRatio();
            SetColumnsMaxValue();
            SortFilterDataView();
            StateHasChanged();
        }

        await base.OnParametersSetAsync();
    }

    // ------------------------------------------------------------------------------------------------------------------------
    // Event Handlers
    // ------------------------------------------------------------------------------------------------------------------------

    /// <summary>
    /// Show Settings modal
    /// </summary>
    private void OnClick_Settings()
    {
        State.ShowSettings = true;
        State.HasChanged();
    }

    /// <summary>
    /// Saves datatable csv to file location of user's choice.
    /// </summary>
    private async void OnClick_Download()
    {
        var fileName = $"RC2BPS-Results-CPU{State.Cpu.Max}-KG{State.Weight.Max:0}-L{State.Length.Max:0}-W{State.Width.Max:0}-H{State.Height.Max:0}.csv";
        var fileFilter = "CSV files|*.csv|All files|*.*";
        await Task.Run(() =>
        {
            Microsoft.Win32.SaveFileDialog saveFileDialog = new();
            saveFileDialog.FileName = fileName;
            saveFileDialog.Filter = fileFilter;
            if (saveFileDialog.ShowDialog() == true)
            {
                File.WriteAllText(saveFileDialog.FileName, GetCsvString(State.SimData));
            }
        });
    }

    private void OnClick_RemoveAllSort()
    {
        State.ColumnsSort.Clear();
        State.RowFilters.Clear();
        SortFilterDataView();
        State.HasChanged();
    }

    private void OnClick_SortFilterCancel()
    {
        SortFilterForm.ColumnName = null;
    }

    private void OnClick_SortFilterReset()
    {
        SortFilterForm.ColumnSort = null;
        SortFilterForm.RowFilter = null;
        OnSubmit_SortFilterForm();
        SortFilterForm.ColumnName = null;
        State.HasChanged();
    }

    //private void OnFocusIn_SortFilterDropdown()
    //{
    //    SortFilterFormFocus = true;
    //}

    //private async void OnFocusOut_SortFilterDropdown()
    //{
    //    SortFilterFormFocus = false;
    //    await Task.Delay(10);
    //    if (!SortFilterFormFocus)
    //    {
    //        SortFilterForm.ColumnName = null;
    //        SortFilterForm.ColumnSort = null;
    //        SortFilterForm.RowFilter = null;
    //    }
    //    StateHasChanged();
    //}

    /// <summary>
    /// Handles sort filter form submit
    /// </summary>
    private void OnSubmit_SortFilterForm()
    {
        // Should never happen, the form is only rendered when columnName is matched
        if (string.IsNullOrWhiteSpace(SortFilterForm.ColumnName)) return;

        // Update Column Sort
        if (State.ColumnsSort.Contains(SortFilterForm.ColumnName))
            State.ColumnsSort.Remove(SortFilterForm.ColumnName);

        if (SortFilterForm.ColumnSort != null)
            State.ColumnsSort.Add(SortFilterForm.ColumnName, SortFilterForm.ColumnSort);

        // Update Row Filter
        if (State.RowFilters.ContainsKey(SortFilterForm.ColumnName))
            State.RowFilters.Remove(SortFilterForm.ColumnName);

        if (!string.IsNullOrWhiteSpace(SortFilterForm.RowFilter)
            && !SortFilterForm.RowFilter.Trim().Equals(SortFilterForm.ColumnName, StringComparison.OrdinalIgnoreCase)
            && !SortFilterForm.RowFilter.Trim().Equals($"[{SortFilterForm.ColumnName}]", StringComparison.OrdinalIgnoreCase))
            State.RowFilters.Add(SortFilterForm.ColumnName, SortFilterForm.RowFilter);

        // update highlighting
        State.HighlightValues[SortFilterForm.ColumnName] = SortFilterForm.HighlightValues;

        // close modal
        SortFilterForm.ColumnName = null;

        // Apply Sort and Filters
        SortFilterDataView();
        State.HasChanged();
    }

    /// <summary>
    /// Factory creates an action that sets the ColumnNameShowFilter variable
    /// </summary>
    /// <param name="columnName"></param>
    private Action OnClick_ColumnName_Factory(string columnName)
    {
        return () => { OnClick_ColumnName(columnName); };
    }

    private void OnClick_ColumnName(string columnName)
    {
        if (SortFilterForm.ColumnName == columnName)
        {
            SortFilterForm.ColumnName = null;
        }
        else
        {
            SortFilterForm.ColumnName = columnName;
            SortFilterForm.ColumnSort = State.ColumnsSort.Contains(columnName) ? (SortDirection?)State.ColumnsSort[columnName] : null;
            SortFilterForm.RowFilter = State.RowFilters.ContainsKey(columnName) ? State.RowFilters[columnName] : $"[{columnName}]";
            SortFilterForm.HighlightValues = State.HighlightValues.ContainsKey(columnName) ? State.HighlightValues[columnName] : false;
            StateHasChanged();
        }
    }

    // ------------------------------------------------------------------------------------------------------------------------
    // Helper Functions
    // ------------------------------------------------------------------------------------------------------------------------

    /// <summary>
    /// Updates ColumnsMaxValue and State.ColumnsHighlightMaxValue
    /// </summary>
    private void SetColumnsMaxValue()
    {
        var ColumnsHighlightMaxValue = new Dictionary<string, bool>();
        ColumnsMaxValue.Clear();

        foreach (DataColumn column in State.SimData.Columns)
        {
            if (column.DataType == typeof(double) || column.DataType == typeof(int))
            {
                if (State.HighlightValues.ContainsKey(column.ColumnName))
                    ColumnsHighlightMaxValue.Add(column.ColumnName, State.HighlightValues[column.ColumnName]);
                else
                    ColumnsHighlightMaxValue.Add(column.ColumnName, false);

                // this can be split to use multithreading, but not worth it for relatively small table size
                ColumnsMaxValue[column.ColumnName] = 0;
                foreach (DataRow dataRow in State.SimData.Rows)
                {
                    object obj = dataRow[column.ColumnName];
                    double value = obj is double ? (double)obj : (int)obj;
                    if (value > ColumnsMaxValue[column.ColumnName])
                        ColumnsMaxValue[column.ColumnName] = value;
                }
            }
            else
            {
                ColumnsMaxValue[column.ColumnName] = 0;
                foreach (DataRow dataRow in State.SimData.Rows)
                {
                    object obj = dataRow[column.ColumnName];
                    double value = obj.ToString()?.Length ?? 0;
                    if (value > ColumnsMaxValue[column.ColumnName])
                        ColumnsMaxValue[column.ColumnName] = value;
                }
            }
        }
        State.HighlightValues = ColumnsHighlightMaxValue;
    }

    /// <summary>
    /// Updates ColumnsZeroRatioWeapon and ColumnsZeroRatioDirection
    /// </summary>
    private void SetColumnsWithZeroRatio()
    {
        ColumnsZeroRatioWeapon.Clear();
        ColumnsZeroRatioDirection.Clear();
        foreach (var weapon in State.Weapons)
        {
            if (State.WeaponSettings[weapon.Key].WeaponRatio == 0.0)
            {
                ColumnsZeroRatioWeapon.AddRange(BlockPenSimulator.GetWeaponColumNames(State, weapon.Value.name));
            }
            if (State.WeaponSettings[weapon.Key].WeaponFrontRatio == 0.0)
            {
                ColumnsZeroRatioDirection.AddRange(BlockPenSimulator.GetWeaponColumNames(State, weapon.Value.name, Direction.Front));
            }
            if (State.WeaponSettings[weapon.Key].WeaponSideRatio == 0.0)
            {
                ColumnsZeroRatioDirection.AddRange(BlockPenSimulator.GetWeaponColumNames(State, weapon.Value.name, Direction.Side));
            }
            if (State.WeaponSettings[weapon.Key].WeaponTopRatio == 0.0)
            {
                ColumnsZeroRatioDirection.AddRange(BlockPenSimulator.GetWeaponColumNames(State, weapon.Value.name, Direction.Top));
            }
        }
    }

    /// <summary>
    /// Upadates dataview sort and filter value
    /// </summary>
    private void SortFilterDataView()
    {
        // generate sort string
        var sb = new StringBuilder();
        foreach (DictionaryEntry sort in State.ColumnsSort.Cast<DictionaryEntry>().Reverse())
        {
            string columnName = sort.Key.ToString() ?? string.Empty;
            SortDirection? sortDirection = (SortDirection?)sort.Value;

            if (sortDirection == null || !State.SimData.Columns.Contains(columnName)) continue;
            if (sb.Length > 0) sb.Append(", ");
            sb.Append($"{columnName} {sortDirection}");
        }
        var Sort = sb.ToString();

        // generate row filter string
        sb.Clear();
        foreach (KeyValuePair<string, string> Filter in State.RowFilters)
        {
            if (sb.Length > 0) sb.Append(" AND ");
            sb.Append(Filter.Value);
        }
        var RowFilter = sb.ToString();

        try
        {
            SimDataView = new DataView(State.SimData, RowFilter, Sort, DataViewRowState.CurrentRows);
        }
        catch (Exception)
        {
            SimDataView = new DataView(State.SimData, "FALSE", "", DataViewRowState.CurrentRows);
        }
    }

    /// <summary>
    /// Linearly interpolates between 2 numbers, using a 3rd number between 0 and 1. Equivelant to: y*(1-s)+x*s
    /// </summary>
    /// <param name="y"></param>
    /// <param name="x"></param>
    /// <param name="s"></param>
    /// <returns></returns>
    private double Lerp(double y, double x, double s) { s = Saturate(s); return x * s + y * (1.0 - s); }

    /// <summary>
    /// Clamps a number between 0 and 1.
    /// </summary>
    /// <param name="s"></param>
    /// <returns></returns>
    private double Saturate(double s) => Math.Max(Math.Min(1.0, s), 0);

    /// <summary>
    /// Converts datatable to csv, strictly following RFC 4180 definition. https://datatracker.ietf.org/doc/html/rfc4180
    /// </summary>
    /// <param name="data"></param>
    /// <returns></returns>
    private string GetCsvString(DataTable data)
    {
        var sb = new StringBuilder();
        var regex = new Regex(@"""|,|\r\n");

        var columnNames = new string[data.Columns.Count];
        for (int i = 0; i < columnNames.Length; i++)
        {
            columnNames[i] = data.Columns[i].ColumnName;
            if (regex.IsMatch(columnNames[i]))
            {
                columnNames[i] = $"\"{columnNames[i].Replace(@"""", @"""""")}\"";
            };
        }
        sb.AppendJoin(',', columnNames);

        for (int r = 0; r < data.Rows.Count; r++)
        {
            sb.Append("\r\n");
            var rowStrings = new string[data.Rows[r].ItemArray.Length];
            for (int i = 0; i < rowStrings.Length; i++)
            {
                rowStrings[i] = data.Rows[r].ItemArray[i]?.ToString() ?? string.Empty;
                if (data.Columns[i].DataType == typeof(double) && State.useDecimalComma)
                {
                    rowStrings[i] = rowStrings[i].Replace(".", ",");
                }
                if (regex.IsMatch(rowStrings[i]))
                {
                    rowStrings[i] = $"\"{rowStrings[i].Replace(@"""", @"""""")}\"";
                }
            }
            sb.AppendJoin(',', rowStrings);
        }

        return sb.ToString();
    }

    /// <summary>
    /// Converts data row value to string. Truncates doubles to readable lengths.
    /// </summary>
    /// <param name="idx"></param>
    /// <param name="Row"></param>
    /// <returns></returns>
    private string GetValueString(DataRow Row, DataColumn Col)
    {
        string value;
        object obj = Row[Col.ColumnName];
        if (obj is double)
        {
            if (Col == State.SimData.Columns[State.SimData.Columns.Count - 1])
                value = ((double)obj).ToString("0.00000");
            else
                value = ((double)obj).ToString("0.00");

            if (State.useDecimalComma) value = value.Replace(".", ",");
        }
        else
        {
            value = obj?.ToString() ?? string.Empty;
        }
        return value;
    }

    /// <summary>
    /// Data provider for datatable compatability with Blazor Virtualization
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<DataRow>> DataRowProvider(ItemsProviderRequest request)
    {
        try
        {
            var stopIndex = Math.Min(request.StartIndex + request.Count, SimDataView.Count);
            var retval = new DataRow[stopIndex - request.StartIndex];
            for (int i = request.StartIndex; i < stopIndex; i++)
            {
                retval[i - request.StartIndex] = SimDataView[i].Row;
            }
            return new ValueTask<ItemsProviderResult<DataRow>>(new ItemsProviderResult<DataRow>(retval, SimDataView.Count));
        }
        catch (Exception)
        {
            return new ValueTask<ItemsProviderResult< DataRow >> (new ItemsProviderResult<DataRow>(new DataRow[0], 0));
        }
    }
}
