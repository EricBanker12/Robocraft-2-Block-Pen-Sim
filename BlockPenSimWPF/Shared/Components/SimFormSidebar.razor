@using BlockPenSimWPF.Data;
@using BlockPenSimWPF.Shared.Models;
@using BlockPenSimWPF.Shared.State;

<header id="SideBar" class="position-relative col-12" style="width: 320px; margin-left: @(State.ShowSideBar ? "0px" : "-320px"); transition: margin-left 0.5s ease;">
    <form class="h-100" @onsubmit="OnSubmit" @onsubmit:preventDefault>
        <div class="card h-100 overflow-hidden" aria-hidden="@State.ShowSideBar">
            <div class="card-header">
                <h1 class="h3 text-center">Robocraft <img src="images/appicon.svg" title="2" alt="2" style="height: 1.0em; transform: translate(0, -0.1em);" class="d-inline-block" /><br/>Block Penetraton Simulator</h1>
            </div>
            <ul class="nav nav-tabs px-0">
                <li class="nav-item">
                    <button id="BlocksTabButton" type="button" class="nav-link @(tab == SimulationFormTab.Blocks ? "active" : string.Empty)" @onclick="OnClick_Tab_Factory(SimulationFormTab.Blocks)">
                        <span>Blocks<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="Set minimum and maximum constraints for size, weight, and CPU cost to fill with blocks and simulate taking weapon damage.">?</sup></span>
                    </button>
                </li>
                <li class="nav-item">
                    <button id="WeaponsTabButton" type="button" class="nav-link @(tab == SimulationFormTab.Weapons ? "active" : string.Empty)" @onclick="OnClick_Tab_Factory(SimulationFormTab.Weapons)">
                        <span>Weapons<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="Set Count for calculating Time-To-Penetrate (TTP) from simulation Shots-To-Penetrate (STP).&#10;Set Ratio for what proportion of incomming damage comes from which weapon count.&#10Set Front/Side/Top for what proportion of incomming damage comes from which direction.">?</sup></span>
                    </button>
                </li>
            </ul>
            <div class="card-body overflow-auto">
                <section class="collapse @(tab == SimulationFormTab.Blocks ? "show" : string.Empty)" aria-hidden="@(tab == SimulationFormTab.Blocks)" aria-expanded="@(tab == SimulationFormTab.Blocks)" aria-labelledby="BlocksTabButton">
                    <label class="my-2">CPU</label>
                    <div class="input-group input-group-sm">
                        <label for="inputCpuMin" aria-label="CPU Min" class="input-group-text">Min</label>
                        <input id="inputCpuMin" type="number" required min="1" max="940" step="1" @bind-value="simForm.CpuMin" class="form-control @IsValidClass(nameof(simForm.CpuMin))" />
                        <label for="inputCpuMax" aria-label="CPU Max" class="input-group-text">Max</label>
                        <input id="inputCpuMax" type="number" required min="1" max="940" step="1" @bind-value="simForm.CpuMax" class="form-control @IsValidClass(nameof(simForm.CpuMax))" />
                        <div class="invalid-feedback">
                            <ul class="mb-0">
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.CpuMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.CpuMax)))
                                {
                                    <li>@errorMessage</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <label class="my-2">Weight (kg)</label>
                    <div class="input-group input-group-sm">
                        <label for="inputWeightMin" aria-label="Weight Min" class="input-group-text">Min</label>
                        <input id="inputWeightMin" type="number" required min="0" step="any" @bind-value="simForm.WeightMin" class="form-control @IsValidClass(nameof(simForm.WeightMin))" />
                        <label for="inputWeightMax" aria-label="Weight Max" class="input-group-text">Max</label>
                        <input id="inputWeightMax" type="number" required min="0" step="any" @bind-value="simForm.WeightMax" class="form-control @IsValidClass(nameof(simForm.WeightMax))" />
                        <div class="invalid-feedback">
                            <ul class="mb-0">
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeightMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeightMax)))
                                {
                                    <li>@errorMessage</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <label class="my-2">Length (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the back and front sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputLengthMin" aria-label="Length Min" class="input-group-text">Min</label>
                        <input id="inputLengthMin" type="number" required min="0" max="63" step="any" @bind-value="simForm.LengthMin" class="form-control @IsValidClass(nameof(simForm.LengthMin))" />
                        <label for="inputLengthMax" aria-label="Length Max" class="input-group-text">Max</label>
                        <input id="inputLengthMax" type="number" required min="0" max="63" step="any" @bind-value="simForm.LengthMax" class="form-control @IsValidClass(nameof(simForm.LengthMax))" />
                        <div class="invalid-feedback">
                            <ul class="mb-0">
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.LengthMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.LengthMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <label class="my-2">Width (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the right and left sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputWidthMin" aria-label="Width Min" class="input-group-text">Min</label>
                        <input id="inputWidthMin" type="number" required min="0" max="63" step="any" @bind-value="simForm.WidthMin" class="form-control @IsValidClass(nameof(simForm.WidthMin))" />
                        <label for="inputWidthMax" aria-label="Width Max" class="input-group-text">Max</label>
                        <input id="inputWidthMax" type="number" required min="0" max="63" step="any" @bind-value="simForm.WidthMax" class="form-control @IsValidClass(nameof(simForm.WidthMax))" />
                        <div class="invalid-feedback">
                            <ul class="mb-0">
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WidthMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WidthMax)))
                                {
                                    <li>@errorMessage</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <label class="my-2">Height (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the bottom and top sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputHeightMin" aria-label="Height Min" class="input-group-text">Min</label>
                        <input id="inputHeightMin" type="number" required min="0" max="63" step="any" @bind-value="simForm.HeightMin" class="form-control @IsValidClass(nameof(simForm.HeightMin))" />
                        <label for="inputHeightMax" aria-label="Height Max" class="input-group-text">Max</label>
                        <input id="inputHeightMax" type="number" required min="0" max="63" step="any" @bind-value="simForm.HeightMax" class="form-control @IsValidClass(nameof(simForm.HeightMax))" />
                        <div class="invalid-feedback">
                            <ul class="mb-0">
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.HeightMin)))
                                {
                                    <li>@errorMessage</li>
                                }
                                @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.HeightMax)))
                                {
                                    <li>@errorMessage</li>
                                }
                            </ul>
                        </div>
                    </div>
                </section>
                <section class="collapse @(tab == SimulationFormTab.Weapons ? "show" : string.Empty)" aria-hidden="@(tab == SimulationFormTab.Weapons)" aria-expanded="@(tab == SimulationFormTab.Weapons)" aria-labelledby="WeaponsTabButton">
                    @foreach (var weapon in State.Weapons)
                    {
                        <label class="my-2">@weapon.Value.name</label>
                        <div class="input-group input-group-sm">
                            <label for="@($"input{weapon.Key}Count")" aria-label="@(weapon.Value.name + " Count")" class="input-group-text">Count</label>
                            <input id="@($"input{weapon.Key}Count")" required type="number" min="1" step="1" @bind-value="simForm.WeaponCount[weapon.Key]" class="form-control @IsValidClass(nameof(simForm.WeaponCount), weapon.Key)" />
                            <label for="@($"input{weapon.Key}Ratio")" aria-label="@(weapon.Value.name + " Ratio")" class="input-group-text">Ratio</label>
                            <input id="@($"input{weapon.Key}Ratio")" required type="number" min="0" step="any" @bind-value="simForm.WeaponRatio[weapon.Key]" class="form-control @IsValidClass(nameof(simForm.WeaponRatio), weapon.Key)" />
                            <div class="invalid-feedback">
                                <ul class="mb-0">
                                    @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeaponCount), weapon.Key))
                                    {
                                        <li>@errorMessage</li>
                                    }
                                    @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeaponRatio), weapon.Key))
                                    {
                                        <li>@errorMessage</li>
                                    }
                                </ul>
                            </div>
                            <div class="input-group input-group-sm mt-2">
                                @foreach (var direction in Enum.GetValues<Direction>())
                                {
                                    <label for="@($"input{weapon.Key}{direction}")" aria-label="@($"{weapon.Value.name} {direction} Ratio")" class="input-group-text">@direction.ToString()</label>
                                    if (direction == Direction.Front)
                                    {
                                        <input id="@($"input{weapon.Key}{direction}")" required type="number" min="0" step="any" @bind-value="simForm.WeaponFrontRatio[weapon.Key]" class="form-control @IsValidClass(nameof(simForm.WeaponFrontRatio), weapon.Key)" />
                                    }
                                    if (direction == Direction.Side)
                                    {
                                        <input id="@($"input{weapon.Key}{direction}")" required type="number" min="0" step="any" @bind-value="simForm.WeaponSideRatio[weapon.Key]" class="form-control @IsValidClass(nameof(simForm.WeaponSideRatio), weapon.Key)" />
                                    }
                                    if (direction == Direction.Top)
                                    {
                                        <input id="@($"input{weapon.Key}{direction}")" required type="number" min="0" step="any" @bind-value="simForm.WeaponTopRatio[weapon.Key]" class="form-control @IsValidClass(nameof(simForm.WeaponTopRatio), weapon.Key)" />
                                    }
                                }
                                <div class="invalid-feedback">
                                    <ul class="mb-0">
                                        @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeaponFrontRatio), weapon.Key))
                                        {
                                            <li>@errorMessage</li>
                                        }
                                        @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeaponSideRatio), weapon.Key))
                                        {
                                            <li>@errorMessage</li>
                                        }
                                        @foreach (var errorMessage in simForm.GetErrorMessages(nameof(simForm.WeaponTopRatio), weapon.Key))
                                        {
                                            <li>@errorMessage</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                </section>
            </div>
            <div class="card-footer">
                <button class="btn btn-lg btn-primary w-100" type="submit">Run Simulation</button>
            </div>
        </div>
    </form>
    <div class="position-absolute" style="right: @(State.ShowSideBar ? "5px" : "-35px"); top: 5px; transition: right 0.5s ease; z-index: 1045;">
        <button class="btn btn-sm btn-primary p-0"
            style="width: 30px; height: 30px; border-radius: 50%;"
            title="Show/hide sidebar."
            @onclick="ToggleShowSideBar">
            <div class="d-flex justify-content-center">
                <span class="oi oi-chevron-@(State.ShowSideBar ? "left" : "right")" aria-hidden="true" style="font-size: 0.9em; transform: translate(@(State.ShowSideBar ? "-0.15ch" : "0.15ch"))"></span>
            </div>
        </button>
    </div>
</header>

@code {
    [Parameter]
    public IndexStore State { get; set; } = new();

    private SimulationForm simForm = new();

    private SimulationFormTab tab = SimulationFormTab.Blocks;

    private Action OnClick_Tab_Factory(SimulationFormTab tab)
    {
        return () => { this.tab = tab; };
    }

    private void ToggleShowSideBar()
    {
        State.ShowSideBar = !State.ShowSideBar;
    }

    private async void OnSubmit()
    {
        if (simForm.IsValid())
        {
            simForm.SetState(State);
            State.ShowLoading = true;
            State.HasChanged();

            var tempTable = State.SimData;
            State.SimData = await BlockPenSimulator.RunAsync(State);
            tempTable.Dispose();
            State.ShowLoading = false;
            State.HasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        simForm.Reset(State);
        State.OnResetPreferences.Add(() => { simForm.Reset(State); });

        if (!State.ShowSideBar)
        {
            await Task.Delay(10);
            State.ShowSideBar = true;
        }

        await base.OnInitializedAsync();
    }

    private string IsValidClass(string fieldName)
    {
        return simForm.WasValid(fieldName) ? string.Empty : "is-invalid";
    }

    private string IsValidClass(string fieldName, object key)
    {
        return simForm.IsValid(fieldName, key) ? string.Empty : "is-invalid";
    }
}
