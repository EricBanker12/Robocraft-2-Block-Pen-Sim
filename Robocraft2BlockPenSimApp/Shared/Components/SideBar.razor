@using Robocraft2BlockPenSimApp.Data;
@using Robocraft2BlockPenSimApp.Shared.Models;
@using Robocraft2BlockPenSimApp.Shared.State;

<header class="position-relative col-12" style="width: 320px; margin-left: @(State.ShowSideBar ? "0px" : "-320px"); transition: margin-left 0.5s ease;">
    <div class="card h-100" aria-hidden="@(State.ShowSideBar ? "false" : "true")">
        <div class="card-header">
            <h1 class="h3 text-center">Robocraft 2 Block Penetraton Simulator</h1>
        </div>
        <div class="card-body overflow-auto">
            <form @onsubmit="OnSubmit" @onsubmit:preventDefault>
                <section>
                    <h2 class="h5 my-0">Block Fill Constraints<sup class="text-muted px-1" style="cursor: help;" tabindex="0"
                        title="Set minimum and maximum constraints for size, weight, and CPU cost to fill with blocks and simulate taking weapon damage.">?</sup></h2>
                    <label class="my-1">CPU</label>
                    <div class="input-group input-group-sm">
                        <label for="inputCpuMin" aria-label="CPU Min" class="input-group-text">Min</label>
                        <input id="inputCpuMin" type="number" min="0" max="940" step="1" @bind-value="State.Cpu.Min" class="form-control @(State.Cpu.Min < 0 || State.Cpu.Min > 940 ? "is-invalid" : "")" />
                        <label for="inputCpuMax" aria-label="CPU Max" class="input-group-text">Max</label>
                        <input id="inputCpuMax" type="number" min="0" max="940" step="1" @bind-value="State.Cpu.Max" class="form-control @(State.Cpu.Max < 0 || State.Cpu.Max > 940 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Weight (kg)</label>
                    <div class="input-group input-group-sm">
                        <label for="inputWeightMin" aria-label="Weight Min" class="input-group-text">Min</label>
                        <input id="inputWeightMin" type="number" min="0" max="1825344" step="1" @bind-value="State.Weight.Min" class="form-control @(State.Weight.Min < 0 || State.Weight.Min > 1825344 ? "is-invalid" : "")" />
                        <label for="inputWeightMax" aria-label="Weight Max" class="input-group-text">Max</label>
                        <input id="inputWeightMax" type="number" min="0" max="1825344" step="1" @bind-value="State.Weight.Max" class="form-control @(State.Weight.Max < 0 || State.Weight.Max > 1825344 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Length (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the back and front sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputLengthMin" aria-label="Length Min" class="input-group-text">Min</label>
                        <input id="inputLengthMin" type="number" min="0" max="63" step="1" @bind-value="State.Length.Min" class="form-control @(State.Length.Min < 0 || State.Length.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputLengthMax" aria-label="Length Max" class="input-group-text">Max</label>
                        <input id="inputLengthMax" type="number" min="0" max="63" step="1" @bind-value="State.Length.Max" class="form-control @(State.Length.Max < 0 || State.Length.Max > 63 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Width (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the right and left sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputWidthMin" aria-label="Width Min" class="input-group-text">Min</label>
                        <input id="inputWidthMin" type="number" min="0" max="63" step="1" @bind-value="State.Width.Min" class="form-control @(State.Width.Min < 0 || State.Width.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputWidthMax" aria-label="Width Max" class="input-group-text">Max</label>
                        <input id="inputWidthMax" type="number" min="0" max="63" step="1" @bind-value="State.Width.Max" class="form-control @(State.Width.Max < 0 || State.Width.Max > 63 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Height (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the bottom and top sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputHeightMin" aria-label="Height Min" class="input-group-text">Min</label>
                        <input id="inputHeightMin" type="number" min="0" max="63" step="1" @bind-value="State.Height.Min" class="form-control @(State.Height.Min < 0 || State.Height.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputHeightMax" aria-label="Height Max" class="input-group-text">Max</label>
                        <input id="inputHeightMax" type="number" min="0" max="63" step="1" @bind-value="State.Height.Max" class="form-control @(State.Height.Max < 0 || State.Height.Max > 63 ? "is-invalid" : "")" />
                    </div>
                </section>
                <hr />
                <section>
                    <h2 class="h5 my-0">Weapon Score Ratio<sup class="text-muted px-1" style="cursor: help;" tabindex="0"
                        title="Set count for calculating Time-To-Penetrate (TTP) from simulation Shots-To-Penetrate (STP).&#10;Set ratio for what proportion of incomming damage comes from which weapon count">?</sup></h2>
                    @for (int i = 0; i < State.Weapons.Length; i++)
                    {
                        int idx = i; // https://stackoverflow.com/questions/60232952/blazor-select-bind-to-a-value-in-a-list
                        string name = State.Weapons[idx].name;
                        string nameShrunk = name.Replace(" ", "");

                        <label class="my-1">@name</label>
                        <div class="input-group input-group-sm">
                            <label for="@($"input{nameShrunk}Count")" aria-label="@(name + " Count")" class="input-group-text">Count</label>
                            <input id="@($"input{nameShrunk}Count")" type="number" min="0" step="1" @bind-value="State.WeaponCount[idx]" class="form-control @(State.WeaponCount[idx] < 0 ? "is-invalid" : "")" />
                            <label for="@($"input{nameShrunk}Ratio")" aria-label="@(name + " Ratio")" class="input-group-text">Ratio</label>
                            <input id="@($"input{nameShrunk}Ratio")" type="number" min="0" step="1" @bind-value="State.WeaponRatio[idx]" class="form-control @(State.WeaponRatio[idx] < 0 ? "is-invalid" : "")" />
                        </div>
                    }
                </section>
                <hr />
                <section>
                    <h2 class="h5 my-2">Direction Score Ratio<sup class="text-muted px-1" style="cursor: help;" tabindex="0"
                        title="Set ratio for what proportion of incomming damage comes from which direction.">?</sup></h2>
                    <div class="input-group input-group-sm">
                        @for (int i = 0; i < State.Directions.Length; i++)
                        {
                            int idx = i;
                            string name = State.Directions[idx];

                            <label for="@($"input{name}Ratio")" aria-label="@(name + " Ratio")" class="input-group-text">@name</label>
                            <input id="@($"input{name}Ratio")" type="number" min="0" step="1" @bind-value="State.DirectionRatio[idx]" class="form-control @(State.DirectionRatio[idx] < 0 ? "is-invalid" : "")" />
                        }
                    </div>
                </section>
                <hr />
                <button class="btn btn-lg btn-primary w-100" type="submit">Run Simulation</button>
            </form>
        </div>
    </div>
    <div class="position-absolute" style="right: @(State.ShowSideBar ? "5px" : "-35px"); top: 5px; transition: right 0.5s ease; z-index: 1045;">
        <button class="btn btn-sm btn-primary" style="width: 30px; height: 30px; border-radius: 50%;" @onclick="ToggleShowSideBar">@(State.ShowSideBar ? "🞀" : " 🞂")</button>
    </div>
</header>

@code {
    [Parameter]
    public PageStateIndex State { get; set; }

    [Parameter]
    public Action OnSubmit { get; set; }

    private void ToggleShowSideBar()
    {
        State.ShowSideBar = !State.ShowSideBar;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);
        State.ShowSideBar = true;
        StateHasChanged();
        await base.OnInitializedAsync();
    }
}
