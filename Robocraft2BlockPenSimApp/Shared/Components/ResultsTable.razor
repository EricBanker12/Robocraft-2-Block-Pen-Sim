@using Robocraft2BlockPenSimApp.Shared.Models;
@using Robocraft2BlockPenSimApp.Shared.State;
@using System.Data;

<div class="w-100 h-100 overflow-auto">
    <table class="table table-striped table-hover table-sm @(Application.Current.RequestedTheme == AppTheme.Dark ? "table-dark" : "")">
        <thead class="position-sticky sticky-top" style="box-shadow: 0 1px 0 @(Application.Current.RequestedTheme == AppTheme.Dark ? "rgba(222, 226, 230, 0.5)" : "black");">
            <tr>
                @for (int i = 0; i < Data.Columns.Count; i++)
                {
                    int idx = i;
                    string name = Data.Columns[idx].ColumnName;

                    <th class="border-0" style="white-space: nowrap; height: @($"{(name.Length + 2) * 0.707}ch");" scope="col" @key="name">
                            <div style="width: @(idx + 1 == Data.Columns.Count ? "12ch" : "5ch"); transform-origin: center left; transform: translate(0ch, 0.707em) rotate(-45deg);">
                            <span>@name</span>
                            <button @onclick="SortDataFactory(name)"
                                class="btn btn-sm p-0 ms-1"
                                style="border-radius: 50%; width: 20px; height: 20px;">
                                    @(State.SortColumn == name ? State.SortDirection == SortDirection.DESC ? "⭣" : "⭡" : "⮁")
                            </button>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            <Virtualize @key=Data ItemsProvider="DataRowProvider" Context="Row" >
                <tr @key=Row>
                    @for (int i = 0; i < Row.ItemArray.Length; i++)
                    {
                        int idx = i;
                        string value = GetValueString(idx, Row);

                        if (idx + 3 >= Row.ItemArray.Length)
                        {
                            double val = (double)Row.ItemArray[idx];
                            double percentMax = 0;
                            if (Row.Table.Columns[idx].ColumnName == "Score")
                                percentMax = val / State.MaxScore;
                            if (Row.Table.Columns[idx].ColumnName == "Score / CPU")
                                percentMax = val / State.MaxScorePerCpu;
                            if (Row.Table.Columns[idx].ColumnName == "Score / Weight")
                                percentMax = val / State.MaxScorePerWeight;

                            <td class="position-relative">
                                <div class="position-absolute top-0 start-0 end-0" style="bottom: -1px; background-color: rgba(0,255,0,@(Lerp(0.0, 0.25, percentMax).ToString()));"></div>
                                <div class="position-relative">
                                    <span>@value</span>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                </tr>
            </Virtualize>
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public PageStateIndex State { get; set; }

    [Parameter]
    public DataTable Data { get; set; }

    [Parameter]
    public Action<string> SortData { get; set; }

    private Action SortDataFactory(string columnName)
    {
        return () => { SortData(columnName); };
    }

    private double Lerp(double y, double x, double s) => x * s + y * (1 - s);

    private string GetValueString(int idx, DataRow Row)
    {
        string value;
        object obj = Row.ItemArray[idx];
        if (obj is double)
        {
            if (idx + 1 == Row.ItemArray.Length)
                value = ((double)obj).ToString("0.00000");
            else
                value = ((double)obj).ToString("0.00");
        }
        else
        {
            value = obj.ToString();
        }
        return value;
    }

    private ValueTask<ItemsProviderResult<DataRow>> DataRowProvider(ItemsProviderRequest request)
    {
        try
        {
            var stopIndex = Math.Min(request.StartIndex + request.Count, Data.Rows.Count);
            var retval = new DataRow[stopIndex - request.StartIndex];
            for (int i = request.StartIndex; i < stopIndex; i++)
            {
                retval[i - request.StartIndex] = Data.Rows[i];
            }
            return new ValueTask<ItemsProviderResult<DataRow>>(new ItemsProviderResult<DataRow>(retval, Data.Rows.Count));
        }
        catch (Exception)
        {
            return new ValueTask<ItemsProviderResult< DataRow >> (new ItemsProviderResult<DataRow>(new DataRow[0], 0));
        }
    }
}
