@using Robocraft2BlockPenSimApp.Data;
@using static Robocraft2BlockPenSimApp.Data.Structs;
@using static Robocraft2BlockPenSimApp.Data.Enums;

<header class="" style="width: 320px;">
    <div class="card h-100">
        <div class="card-header">
            <h1 class="h3 text-center">Robocraft 2 Block Penetraton Simulator</h1>
        </div>
        <div class="card-body overflow-auto">
            <form @onsubmit=@OnSubmit @onsubmit:preventDefault>
                <section>
                    <h2 class="h5 my-0">Block Fill Constraints<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="Set minimum and maximum constraints for size, weight, and CPU cost to fill with blocks and simulate taking weapon damage.">?</sup></h2>
                    <label class="my-1">CPU</label>
                    <div class="input-group input-group-sm">
                        <label for="inputCpuMin" aria-label="CPU Min" class="input-group-text">Min</label>
                        <input id="inputCpuMin" type="number" min="0" max="940" step="1" @bind-value=@Cpu.Min class="form-control @(Cpu.Min < 0 || Cpu.Min > 940 ? "is-invalid" : "")" />
                        <label for="inputCpuMax" aria-label="CPU Max" class="input-group-text">Max</label>
                        <input id="inputCpuMax" type="number" min="0" max="940" step="1" @bind-value=@Cpu.Max class="form-control @(Cpu.Max < 0 || Cpu.Max > 940 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Weight (kg)</label>
                    <div class="input-group input-group-sm">
                        <label for="inputWeightMin" aria-label="Weight Min" class="input-group-text">Min</label>
                        <input id="inputWeightMin" type="number" min="0" max="1825344" step="1" @bind-value=@Weight.Min class="form-control @(Weight.Min < 0 || Weight.Min > 1825344 ? "is-invalid" : "")" />
                        <label for="inputWeightMax" aria-label="Weight Max" class="input-group-text">Max</label>
                        <input id="inputWeightMax" type="number" min="0" max="1825344" step="1" @bind-value=@Weight.Max class="form-control @(Weight.Max < 0 || Weight.Max > 1825344 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Length (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the back and front sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputLengthMin" aria-label="Length Min" class="input-group-text">Min</label>
                        <input id="inputLengthMin" type="number" min="0" max="63" step="1" @bind-value=@Length.Min class="form-control @(Length.Min < 0 || Length.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputLengthMax" aria-label="Length Max" class="input-group-text">Max</label>
                        <input id="inputLengthMax" type="number" min="0" max="63" step="1" @bind-value=@Length.Max class="form-control @(Length.Max < 0 || Length.Max > 63 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Width (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the right and left sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputWidthMin" aria-label="Width Min" class="input-group-text">Min</label>
                        <input id="inputWidthMin" type="number" min="0" max="63" step="1" @bind-value=@Width.Min class="form-control @(Width.Min < 0 || Width.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputWidthMax" aria-label="Width Max" class="input-group-text">Max</label>
                        <input id="inputWidthMax" type="number" min="0" max="63" step="1" @bind-value=@Width.Max class="form-control @(Width.Max < 0 || Width.Max > 63 ? "is-invalid" : "")" />
                    </div>
                    <label class="my-1">Height (blocks)<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="The distance in blocks between the bottom and top sides.">?</sup></label>
                    <div class="input-group input-group-sm">
                        <label for="inputHeightMin" aria-label="Height Min" class="input-group-text">Min</label>
                        <input id="inputHeightMin" type="number" min="0" max="63" step="1" @bind-value=@Height.Min class="form-control @(Height.Min < 0 || Height.Min > 63 ? "is-invalid" : "")" />
                        <label for="inputHeightMax" aria-label="Height Max" class="input-group-text">Max</label>
                        <input id="inputHeightMax" type="number" min="0" max="63" step="1" @bind-value=@Height.Max class="form-control @(Height.Max < 0 || Height.Max > 63 ? "is-invalid" : "")" />
                    </div>
                </section>
                <hr />
                <section>
                    <h2 class="h5 my-0">Weapon Score Ratio<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="Set count for calculating Time-To-Penetrate (TTP) from simulation Shots-To-Penetrate (STP).&#10;Set ratio for what proportion of incomming damage comes from which weapon count">?</sup></h2>
                    @for (int i = 0; i < weapons.Length; i++)
                    {
                        int idx = i; // https://stackoverflow.com/questions/60232952/blazor-select-bind-to-a-value-in-a-list
                        <label class="my-1">@weapons[idx].name</label>
                        <div class="input-group input-group-sm">
                            <label for="@($"input{weapons[idx].name}Count")" aria-label="@(weapons[idx].name + "Count")" class="input-group-text">Count</label>
                            <input id="@($"input{weapons[idx].name}Count")" type="number" min="0" step="1" @bind-value=@WeaponCount[idx] class="form-control @(WeaponCount[idx] < 0 ? "is-invalid" : "")" />
                            <label for="@($"input{weapons[idx].name}Ratio")" aria-label="@(weapons[idx].name + "Ratio")" class="input-group-text">Ratio</label>
                            <input id="@($"input{weapons[idx].name}Ratio")" type="number" min="0" step="1" @bind-value=@WeaponRatio[idx] class="form-control @(WeaponRatio[idx] < 0 ? "is-invalid" : "")" />
                        </div>
                    }
                </section>
                <hr />
                <section>
                    <h2 class="h5 my-2">Direction Score Ratio<sup class="text-muted px-1" style="cursor: help;" tabindex="0" title="Set ratio for what proportion of incomming damage comes from which direction.">?</sup></h2>
                    <div class="input-group input-group-sm">
                    @for (int i = 0; i < directions.Length; i++)
                    {
                        int idx = i;
                        <label for="@($"input{directions[idx]}Ratio")" aria-label="@(directions[idx] + "Ratio")" class="input-group-text">@directions[idx]</label>
                        <input id="@($"input{directions[idx]}Ratio")" type="number" min="0" step="1" @bind-value=@DirectionRatio[idx] class="form-control @(DirectionRatio[idx] < 0 ? "is-invalid" : "")" />
                    }
                    </div>
                </section>
                <hr />
                <button class="btn btn-lg btn-primary w-100" type="submit">Run Simulation</button>
            </form>
        </div>
    </div>
</header>

@code {
    private MinMax Cpu;
    private MinMax Weight;
    private MinMax Length;
    private MinMax Width;
    private MinMax Height;

    private double[] WeaponCount = { };
    private double[] WeaponRatio = { };
    private double[] DirectionRatio = { };

    private Weapon[] weapons = { };
    private Material[] materials = { };
    private string[] directions = { };

    private void OnSubmit()
    {
        // Run Simulation
    }

    protected override async Task OnInitializedAsync()
    {
        var blockData = await BlockData.GetData();
        var cacheData = await CacheData.GetData();

        weapons = blockData.weapons;
        materials = blockData.materials;
        directions = Enum.GetNames(typeof(Direction));

        Cpu = cacheData.Cpu;
        Weight = cacheData.Weight;
        Length = cacheData.Length;
        Width = cacheData.Width;
        Height = cacheData.Height;

        WeaponCount = new double[weapons.Length];
        for (int i = 0; i < WeaponCount.Length && i < cacheData.WeaponCount.Length; i++) WeaponCount[i] = cacheData.WeaponCount[i];

        WeaponRatio = new double[weapons.Length];
        for (int i = 0; i < WeaponRatio.Length && i < cacheData.WeaponRatio.Length; i++) WeaponRatio[i] = cacheData.WeaponRatio[i];

        DirectionRatio = new double[directions.Length];
        for (int i = 0; i < DirectionRatio.Length && i < cacheData.DirectionRatio.Length; i++) DirectionRatio[i] = cacheData.DirectionRatio[i];

        await base.OnInitializedAsync();
    }
}
